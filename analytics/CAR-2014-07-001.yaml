title: Service Search Path Interception
submission_date: 2014/07/17
information_domain: Host
platforms:
  - Windows
subtypes:
  - Process
analytic_types:
  - TTP
contributors:
  - MITRE
id: CAR-2014-07-001
description: 'According to [ATT&CK](https://attack.mitre.org/), an adversary may [escalate privileges](https://attack.mitre.org/tactics/TA0004) by [intercepting the search path](https://attack.mitre.org/techniques/T1579/009) for legitimately installed services. As a result, Windows will launch the target executable instead of the desired binary and command line. This can be done when there are spaces in the binary path and the path is unquoted. Search path interception should never happen legitimately and will likely be the result of an adversary abusing a system misconfiguration. With a few regular expressions, it is possible to identify the execution of services with intercepted search paths.'
coverage:
  - technique: T1574
    tactics:
      - TA0004
      - TA0003
    subtechniques:
      - T1574.009
    coverage: High
implementations:
  - description: 'Look over all service creations that have a quoted path for the first argument. Assuming these still have an absolute path, look for cases in which the command line has a space, but the exe field is not part of the command line. This would indicate that a different process was intended, but the path was intercepted at an earlier space.'
    code: |-
      process = search Process:Create
      services = filter processes where (parent_exe == "services.exe")
      unquoted_services = filter services where (command_line != "\"*" and command_line == "* *")
      intercepted_service = filter unquoted_service where (image_path != "* *" and exe not in command_line)
      output intercepted_service
    type: pseudocode
data_model_references:
  - process/create/command_line
  - process/create/image_path
  - process/create/parent_exe
d3fend_mappings:
  - iri: d3f:ProcessLineageAnalysis
    id: D3-PLA
    label: Process Lineage Analysis
